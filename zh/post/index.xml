<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Dennis&#39;s Grocery</title>
    <link>https://dennisxie.github.io/zh/post/</link>
    <description>Recent content in Posts on Dennis&#39;s Grocery</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jun 2022 16:38:22 +0800</lastBuildDate><atom:link href="https://dennisxie.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker多阶段构建</title>
      <link>https://dennisxie.github.io/zh/post/tech/docker/multi_stage_build/</link>
      <pubDate>Tue, 21 Jun 2022 16:38:22 +0800</pubDate>
      
      <guid>https://dennisxie.github.io/zh/post/tech/docker/multi_stage_build/</guid>
      <description>问题背景 如果有这么个情况，因为某些原因需要合并多个docker镜像里面的文件来组成一个单一的镜像，应该怎么办？
解决方案 使用Docker的多阶段构建。
多阶段构建 多阶段构建解决的问题 通常来说服务构建、测试和部署一般会使用不同的镜像。其中不同的镜像会有一些不同的工具，如构建镜像会包含一些基础构建工具。测试镜像会包含一些分析测试结果的工具。部署镜像则是最精简的镜像，仅包含正常运行所需要的工具和环境等。
在没有多阶段构建的情况下，我们可能会一个脚本来完成程序构建、测试镜像的生成和部署镜像的生成等工作。如下面的代码所示：
docker build -t demo:build -f Dockerfile.build . docker container create --name demo demo:build docker container cp demo:/path/to/build/app ./app docker container rm -f demo docker build -t demo:deploy-latest -f Dockerfile . # copy the app into the deploy image 这样可以保证不同用途的镜像的精简程度，尤其是避免生产环境使用的镜像太肥。有了多阶段构建以后，我们就可以把这些操作移动到Docker镜像构建中去。
使用方法 多阶段构建可以将Docker镜像的构建划分成多个不同阶段，不同阶段使用不同的基础镜像，后面的构建阶段可以使用前面阶段的一些结果。示例代码如下:
FROM base0 # stage without name RUN build something FROM base1 AS stage1 # stage with a name RUN build other things FROM runningiamge:latest WORKDIR /running/path COPY --from=0 /base0/build/app .</description>
    </item>
    
    <item>
      <title>Spring Web程序中Servlet, Filter及Bean的管理</title>
      <link>https://dennisxie.github.io/zh/post/tech/java/spring_web_containers/spring_web_containers/</link>
      <pubDate>Wed, 08 Jun 2022 21:49:58 +0800</pubDate>
      
      <guid>https://dennisxie.github.io/zh/post/tech/java/spring_web_containers/spring_web_containers/</guid>
      <description>1 背景 1.1 问题 最近接触到两个问题。问题本身并不难，但是我自己因为对Servlet和Spring不够熟没有回答正确。问题如下：
Spring Web程序中, Filter对象能不能使用Spring容器中的Bean？ Spring Web程序中, 能不能给Service Bean注入Controller Bean? 1.2 问题拆解 这个问题需要分情况
通过Spring Boot加载的Spring Web程序 通过Servlet容器加载的Spring Web程序取决于是否有做Context继承 2 分析 备注: 本文基于Servlet 3.0及Spring Web MVC 5.3.x分析
2.1 通过Servlet容器加载Servlet 2.1.1 Servlet 3.0加载Servlet的方式 Servlet 3.0开始支持通过SPI加载Servlet的方案 Spring通过 org.springframework.web.SpringServletContainerInitializer 实现了Servlet 3.0中的 ServletContainerInitializer 接口。 SpringServletContainerInitializer 则会在初始化的时候去加载所有的实现了 org.springframework.web.WebApplicationInitializer 的类。 用户通过实现该类即可创建和加载Servlet对象。
2.1.2 创建单Spring容器的Servlet 官方代码示例如下：
public class MyWebApplicationInitializer implements WebApplicationInitializer { @Override public void onStartup(ServletContext servletContext) { // Load Spring web application configuration AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext(); context.</description>
    </item>
    
  </channel>
</rss>
